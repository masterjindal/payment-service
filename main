// payment-service/main.go
package main

import (
    "github.com/gin-gonic/gin"
    "gorm.io/driver/postgres"
    "gorm.io/gorm"
)

type Payment struct {
    ID        uint   `gorm:"primaryKey"`
    OrderID   uint   `json:"order_id"`
    Status    string `json:"status"`
    Amount    float64 `json:"amount"`
}

var db *gorm.DB

func main() {
    dsn := "host=localhost user=user password=password dbname=paymentdb port=5432 sslmode=disable"
    database, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
    if err != nil {
        panic("failed to connect to database")
    }
    db = database

    db.AutoMigrate(&Payment{})

    r := gin.Default()

    r.POST("/payments", createPayment)
    r.GET("/payments/:id", getPayment)

    r.Run(":8080")
}

func createPayment(c *gin.Context) {
    var payment Payment
    if err := c.ShouldBindJSON(&payment); err != nil {
        c.JSON(400, gin.H{"error": err.Error()})
        return
    }
    db.Create(&payment)
    c.JSON(201, payment)
}

func getPayment(c *gin.Context) {
    var payment Payment
    if err := db.First(&payment, c.Param("id")).Error; err != nil {
        c.JSON(404, gin.H{"error": "Payment not found"})
        return
    }
    c.JSON(200, payment)
}
